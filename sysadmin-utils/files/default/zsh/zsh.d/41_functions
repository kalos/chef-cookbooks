# CopyLeft - Calogero Lo Leggio <kalos@nerdrug.org>

# {{{ Functions

#function scrm() { screen -dr "$1" -X quit }

function mkcd() { mkdir "$1" && cd "$1"; }

function calc() { echo "$*" | bc; }

function hex2dec { awk 'BEGIN { printf "%d\n",0x$1}'; }
function dec2hex { awk 'BEGIN { printf "%x\n",$1}'; }

function dsync () { rsync -lprt --progress --stats --delete "$1/" "$2/" }

function dict () {
    dictionary="english"
    [[ "$2" != "" ]] && dictionary=$2
    echo "DEFINE $dictionary $1\nQUIT" | netcat dict.org 2628
}   

# viewing man pages
#function man {
#    /usr/bin/man $* | col -bp | iconv -c | view -c 'set ft=man nomod nolist' -
#}

# Search in the $HISTFILE and select result to execute
#function selhist()
#{
#  emulate -L zsh
#  local TAB=$'\t';
#  (( $# < 1 )) && {
#    echo "Usage: $0 command"
#    return 1
#  };
#  cmd=(${(f)"$(grep -w $1 $HISTFILE | sort | uniq | pr -tn)"})
#  print -l $cmd | less -F
#  echo -n "enter number of desired command [1 - $(( ${#cmd[@]} - 1 ))]: "
#  local answer
#  read answer
#  print -z "${cmd[$answer]#*$TAB}"
#}

# rfc2396 url encoding (by Bart Schaefer)
function urlencode() {
        setopt localoptions extendedglob
        input=( ${(s::)1} )
        print ${(j::)input/(#b)([^A-Za-z0-9_.--version\'\(\)-])/%$(([##16]#match))}
}

# MLDONKEY: Gives only the files that are currently downloaded
function mldl() { (echo vd; echo q) | nc localhost 4000 | sed "/Paused/d" | sed "/- *$/d" }

# Convert IPv6 to IPv4
function 6to4() {
        ipv4=`dig $1|grep -v '^;'|sed -e '/^$/d'|cut -f 6`
        echo; echo "ipv4 addr ==  $ipv4"
        printf "2002:%02x%02x:%02x%02x::1" `echo $ipv4 | tr "." " "`;echo
}

# MISC: Making the right decisions is hard :>
function helpme()
{
        print "Please wait.. i'll think about.."
        for i in 1 2 3; do echo -ne "."; sleep 0.3; done
        if [ $RANDOM -gt $RANDOM ]
        then
                print "Yes\!"
        else
                print "No\!"
        fi
}

# SEARCH: find all suid files in $PATH #2
function findsuid()
{
        sudo find / -type f \( -perm -4000 -o -perm -2000 \) -ls > ~/.suid/suidfiles.`date "+%Y-%m-%d"`.out 2>&1
        sudo find / -type d \( -perm -4000 -o -perm -2000 \) -ls > ~/.suid/suiddirs.`date "+%Y-%m-%d"`.out 2>&1
#        sudo find / -type f \( -perm -2 -o -perm -20 \) -ls > ~/.suid/writefiles.`date "+%Y-%m-%d"`.out 2>&1
#        sudo find / -type d \( -perm -2 -o -perm -20 \) -ls > ~/.suid/writedirs.`date "+%Y-%m-%d"`.out 2>&1
}

# Recursively delete all .svn dirs
function rm_svn() {
  find "$@" -name .svn -print0 | xargs -0 rm -rf
}

# Use vim to convert plaintext to HTML
function 2html() { vim -u NONE -n -c ':syntax on' -c ':so $VIMRUNTIME/syntax/2html.vim' -c ':wqa' $1 > /dev/null 2> /dev/null }

# Usage: show-archive <archive>
# Description: view archive without unpack
function show-archive() {
  if [[ -f $1 ]]
  then
  	case $1 in
  		*.tar.gz)      gunzip -c $1 | tar -tf - -- ;;
  		*.tar)         tar -tf $1 ;;
  		*.tgz)         tar -ztf $1 ;;
  		*.zip)         unzip -l $1 ;;
  		*.bz2)         bzless $1 ;;
  		*)             echo "'$1' Error. Please go away" ;;
  	esac
  else
  	echo "'$1' is not a valid archive"
  fi
}

# provide useful information on globbing
H-Glob() {
echo -e "
/      directories
.      plain files
@      symbolic links
=      sockets
p      named pipes (FIFOs)
*      executable plain files (0100)
%      device files (character or block special)
%b     block special files
%c     character special files
r      owner-readable files (0400)
w      owner-writable files (0200)
x      owner-executable files (0100)
A      group-readable files (0040)
I      group-writable files (0020)
E      group-executable files (0010)
R      world-readable files (0004)
W      world-writable files (0002)
X      world-executable files (0001)
s      setuid files (04000)
S      setgid files (02000)
t      files with the sticky bit (01000)
print *(m-1)          # List files modified today.
print *(a1)           # List files accessed one day ago.
print *(@)            # Print links.
print *(Lk+50)        # List files > 50 Kilobytes.
print *(Lk-50)        # List files < 50 Kilobytes.
print **/*.c          # Recursively list all c files.
print **/*.c~file.c   # List all c files, except file.c
print (foo|bar).*     # List files whos names start foo or bar.
print *~*.*           # 
chmod 644 *(.^x)      # make all non-executable files publically readable
print -l *(.c|.h)     # List all c and header files on their own lines. 
print **/*(g:users:)  # Recursively list files with the group 'users'
echo /proc/*/cwd(:h:t:s/self//) # Analogue of >ps ax | awk '{print $1}'<"
}


### TERMS SETTINGS

# set window title
function title {
   case $TERM in (xterm*|rxvt*)
      precmd () { print -Pn "\e]0;%n@%m: %~\a" }
#      preexec () { print -Pn "\e]0;%n@%m: $*\a" }
      ;;
   esac
}

function precmd { title zsh "$PWD" }
function preexec {
    emulate -L zsh
    local -a cmd; cmd=(${(z)1})
    title $cmd[1]:t "$cmd[2,-1]"
}


#printf '\33]2;%s\007' "new window title"

# make sure we're in an xterm!
# case $TERM in (xterm*|rxvt)
#         precmd () { print -Pn "\e]0;%n@%m: %~\a" }
#         preexec () { print -Pn "\e]0;%n@%m: $*\a" }
#         ;;
# esac
# preexec () { builtin echo -ne "\ek$HOST:${PWD/$HOME/~} [ $1 ]\e\\"; LASTCOMM="$1" }
# precmd () { builtin echo -ne "\ekzsh $HOST:${PWD/$HOME/~} ( $LASTCOMM )\e\\" }



#function title {
#      if [[ $TERM == "screen" ]]; then
#        # Use these two for GNU Screen:
#        print -nR $' 33k'$1$' 33'\
#        print -nR $' 33]0;'$2$''
#      elif [[ $TERM == "xterm" || $TERM == "rxvt-unicode" ]]; then
#        # Use this one instead for XTerms:
#        print -nR $' 33]0;'$*$''
#      fi
#}

# # The prompt shows up in xterm titles too.
# case $TERM in
#    xterm|color_xterm|screen)
#    	# Beware: next line has embedded raw control characters..
# 	PROMPT="%{]0;$baseprompt%}$baseprompt> "
# 
# 	# Before each command is run, throw the command line up into the
# 	# titlebar! (The only problem is that very quick commands flicker..)
# 	preexec () {
# 		print -nP '\033]0;'
# 		print -nP "$coreprompt: "
# 		# Truncate at 60 chars, escape %, escape invisibles
# 		print -nPR "%60>...>${(V)1//\%/%%}"
# 		print -n '\007'
# 		# Also set the screen window title to programs I run.
# 		if [ "$TERM" = screen ]; then
# 			print -nP '\033k%'
# 			print -nPR "%60>...>${(V)1//\%/%%}"
# 			print -n '\033\\'
# 		fi
# 	}
# 	
# 	# Add to the prompt to unset screen window title after program
# 	# exits.
# 	if [ "$TERM" = screen ]; then
# 		PROMPT="%{kzsh\\%}$PROMPT"
# 	fi
# 
#   ;;
#   *) PROMPT="$baseprompt>"
#   ;;
# esac

# set the window title in screen to the currently running program
setopt extended_glob
function preexec () {
    if [[ "$TERM" == "screen" ]]; then
        local CMD=${1[(wr)^(*=*|sudo|-*)]}
        echo -n "\ek$CMD\e\\"
    fi
}

# }}}
